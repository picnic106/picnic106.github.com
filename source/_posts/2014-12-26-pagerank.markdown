---
layout: post
title: "谷歌pagerank算法学习"
date: 2014-12-26 14:34:04 +0800
comments: true
categories: [hadoop]
description: "Google,PageRank,Google PageRank,hadoop"
keywords: PageRank,Google,Google PageRank,hadoop
---

* any list
{:toc}

#一、缘起
最近开始学习hadoop，网上找了一些资料，发现hadoop就是从谷歌公司发明的经典的网页价值排名技术(Page-Rank)发展而来，所以专门学习了一下PageRank原理,但是发现PageRank涉及到线性代数，对于我这个对线性代数一窍不通的人来说，还是有点难度。但是至少让我明白一个道理，学习一定要学好，眼光不要太短，不要以为在大学的时候学数学或者物理没什么用，但是以后你绝对会派上用场，不要给自己的无能找借口，加油！！   

这篇文章主要参考：[Google 的秘密- PageRank 彻底解说](http://www.t086.com/good/pagerank_cn.htm "PageRank 彻底解说")。  
但是因为自身局限，我也只能理解大概。  

<!-- more -->

#一、需要了解的知识点
**1.线性代数中的矩阵**:矩阵是高等代数学中的常见工具，也常见于统计分析等应用数学学科中。    
如果大家忘记了线性代数，大家可以找找大学教科书来回忆回忆。  

*   [矩阵](http://baike.baidu.com/subview/10337/6436981.htm "矩阵")。  

**2.矩阵的特征值和特征向量**:  

*   [矩阵的特征值和特征向量](http://course.tjau.edu.cn/xianxingdaishu/jiao/5.htm "矩阵的特征值和特征向量")。  
 
 
 

 
#二、pagerank概念  
谷歌的网页排名价值是根据网页的被链接数来决定的，也就是说如果你的网页链接到了另外一个网页，那么就当作对另外一个网页的评价。如果这种评价很多，或者取得来自网页价值更高的网页的评价，自身的网页价值也会相应提升。  
网页根据这种方式尽可能准确的提供搜索结果给客户。这也是谷歌为什么这么受欢迎的原因。而在百度搜索经常搜到无关的网页，搜索质量远不如谷歌。  

{% blockquote %}
关于PageRank 
    PageRank，有效地利用了 Web 所拥有的庞大链接构造的特性。 从网页A导向网页B的链接被看作是对页面A对页面B的支持投票，Google根据这个投票数来判断页面的重要性。可是 Google 不单单只看投票数(即链接数)，对投票的页面也进行分析。「重要性」高的页面所投的票的评价会更高，因为接受这个投票页面会被理解为「重要的物品」。
    根据这样的分析,得到了高评价的重要页面会被给予较高的 Page Rank(网页等级)，在检索结果内的名次也会提高。PageRank 是 Google 中表示网页重要性的综合性指标，而且不会受到各种检索(引擎)的影响。倒不如说，PageRank 就是基于对"使用复杂的算法而得到的链接构造"的分析，从而得出的各网页本身的特性。
    当然，重要性高的页面如果和检索词句没有关联同样也没有任何意义。为此 Google 使用了精练后的文本匹配技术，使得能够检索出重要而且正确的页面。
{% endblockquote %}  

那么总结可以知道有几个基本要素：  
1，网页价值取决于被链接数，即反向链接数  
2，被链接的网页是否来自与价值更高的网页  
3，被链接的网页有多少正向链接数，即网页在被链接数网页中占的比重  

#三、pagerank计算  
那怎样才能计算出每个页面的pagerank?怎样根据概念建立数据模型？谷歌运用了线性代数中的矩阵模型，每一行代表一个网页，每一列也代表一个网页。如果有n个网页，即是n阶方阵。从页面 i 链接到另一张页面 j 的时，将其成分定义为1，反之则定义为 0 。即，行列阵 A 的成分 aij 可以用，  

{% coderay lang:Python %}
  aij＝1 if  (从页面 i 向页面 j 「 有 」 链接的情况) 
      0 if  (从页面 i 向页面 j 「没有」链接的情况) 
{% endcoderay %}

以下是用位图表示的 Apache 的在线手册(共128页)的邻接行列。当黑点呈横向排列时，表示这个页面有很多正向链接(即向外导出的链接)；反之，当黑店呈纵向排列时，表示这个页面有很多反向链接。  
![pagerank方阵](/images/pagerank/adjacent.png)  

PageRank 的方阵是把上面方阵倒置后(行和列互换)，为了将各列(column)矢量的总和变成 1 (全概率), 把各个列矢量除以各自的链接数(非零要素数)。这样作成的行列被称为「推移概率行列」，含有 N 个概率变量，各个行矢量表示状态之间的推移概率。倒置的理由是，PageRank 并非重视「链接到多少地方」而是重视「被多少地方链接」。  

PageRank 的计算，就是求属于这个矩阵最大的特征值和特征向量。最大特征向量里面的每个标量即使每个页面的pageranke值。   

(*注) 对 N 次的方阵 A 把满足 Ax =λx 的数 λ 称为 A 的特征值，称 x 为属于 λ 的特征向量。特征值不止一个。  

**但是我在这里有一个疑问，虽然矩阵建立起来了，但为什么最大特征向量里面的标量排名即表示了pagerank的排名，为什么标量最大即pagerank最大。pageranke的原理是（网页价值取决于被链接数；被链接的网页是否来自与价值更高的网页；被链接的网页有多少正向链接数），那么标量最大表示（这一行不为0的值最多；对应的列为0值的多）**  

#四、pagerank例子   
让我们用简单的例子来试着逐次计算 PageRank 。首先考虑一下有像下图表示那样的链接关系的7个HTML文件。并且，这些HTML文件间的链接关系只是闭合于这1-7的文件中。也就是说，除了这些文档以外没有其他任何链接的出入。另外请注意，所有的页面都有正向和反向链接(即没有终点)，这也是后面将提出的一个重要假定,在此暂且不深入探讨。  

![pagerank例子](/images/pagerank/linkstruct.png)    

首先，把这张推移图图表构造的邻接列表表示为排列式，就有以下式子。即，根据各个链接源ID列举链接目标的ID。  

{% coderay lang:Python %}
链接源I D 	链接目标 ID
1		2,3 ,4,5, 7
2		1
3		1,2 
4		2,3,5
5 		1,3,4,6 
6		1,5
7		5
{% endcoderay %}   

以这个邻接列表中所表示的链接关系的邻接行列 A 是以下这样的 7×7 的正方行列。一个仅有要素 0 和 1 位图行列(bitmap matrix)。横向查看第 i 行表示从文件 i 正向链接的文件ID。  

{% coderay lang:Python %}
A = [
	 0, 1, 1, 1, 1, 0, 1; 
	 1, 0, 0, 0, 0, 0, 0;
	 1, 1, 0, 0, 0, 0, 0; 
	 0, 1, 1, 0, 1, 0, 0;
	 1, 0, 1, 1, 0, 1, 0;
	 1, 0, 0, 0, 1, 0, 0; 
	 0, 0, 0, 0, 1, 0, 0; 
 ] 
 {% endcoderay %}   
 
PageRank 式的推移概率行列 M ，是将 A 倒置后将各个数值除以各自的非零要素后得到的。即以下这个 7×7 的正方行列。横向查看第 i 行非零要素表示有指向文件 i 链接的文件ID(文件 i 的反向链接源)。请注意，各纵列的值相加的和为 1(全概率)。  

{% coderay lang:Python %}
M = [ 
	0, 	1,	1/2,	0,	1/4,	1/2,	0; 
	1/5,	0,	1/2,	1/3,	0,	0,	0; 
	1/5,	0,	0,	1/3,	1/4,	0,	0; 
	1/5,	0,	0,	0,	1/4,	0,	0; 
	1/5,	0,	0,	1/3,	0,	1/2,	1; 
	0,	0,	0,	0,	1/4,	0,	0;
	1/5,	0,	0,	0,	0,	0,	0;
]
{% endcoderay %}   

表示 PageRank 的矢量 R (各个的页面的等级数的队列)，存在着 R = cMR 的关系(c 为定量)。在这种情况下，R 相当于线形代数中的固有矢量，c 相当于对应特性值的倒数。为了求得 R ，只要对这个正方行列 M 作特性值分解就可以了。  


#五、实际问题 

七个网页还好计算，但是谷歌要面对的是网络中浩瀚的上万亿上兆的网页，要怎么计算？  
所以谷歌发明了map-reduce技术来面对这种大批量的计算。而hadoop就是这样来的。  


