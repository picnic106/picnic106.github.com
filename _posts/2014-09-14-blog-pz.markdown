---
layout: post
title: "博客个性化设置"
date: 2014-09-14 02:50:16 +0800
comments: true
tags: [octopress]
keywords: octopress,octopress性能优化,octopress不显示时间,octopress安装多说,octopress增加自动生成目录功能(TOC),octopress修改链接为打开窗口方式	
---





## 一、缘起
虽然octopress博客架起来了，但是一些个人设置或者自己不满意的地方还需要修改呢，例如中文设置、时间设置、性能优化等等。我博客主题为["Greyshade"](https://github.com/shashankmehta/greyshade)。  


## 二、性能优化
最近打开个人网站觉得太慢了，使用浏览器的f12，发现打开谷歌的js很慢，所以想办法来替换这些js。在网上搜到这篇博客:["解决Octopress博客访问慢的问题"](http://droidyue.com/blog/2014/06/22/fix-octopress-slow-loading-speed-issue-in-china-mainland/ "解决Octopress博客访问慢的问题")，很感谢这篇博客，文章详细写了如何替换google的js。  
  
<!-- more -->  

### 1，解决fonts.googleapis.com访问慢
首先使用f12发现有一段获取fonts.googleapis.com的字体js,是因为greyshade主题使用了谷歌的字体的api，[谷歌字体（Google Font）初探](http://redstarofsleep.iteye.com/blog/832047)这篇文章对谷歌字体的作用有大体介绍。大家都知道googleappis在内地的访问不是很稳定，很慢。将这些链接修改成国内的360网站卫士常用前端公共库CDN服务(http://libs.useso.com/)以提高访问性能。经过查找这段代码在`/source/_includes/head.html`:   
  
{% codeblock 修改谷歌提供的字体服务 lang:html%}
<!--<link href='http://fonts.googleapis.com/css?family=Nunito:400,300,700' rel='stylesheet' type='text/css'>-->
<link href="http://fonts.useso.com/css?family=Nunito:400,300,700" rel="stylesheet" type="text/css">  
{% endcodeblock %}


### 2，解决ajax.googleapis.com访问慢
使用f12也发现有一段代码访问了谷歌服务的jquery库,360网站也提供jquery库cdn服务。经过查找这段代码也在`/source/_includes/head.html`:  

{% codeblock 修改谷歌提供的jquery库 lang:html%}
<!--<link href='http://fonts.googleapis.com/css?family=Nunito:400,300,700' rel='stylesheet' type='text/css'>-->
<!--<script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))</script>-->
<script src="http://ajax.useso.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>  
{% endcodeblock %}  

至于为啥要用谷歌的jquery库，["为什么推荐使用谷歌加载jquery库文件"](http://blog.csdn.net/jkwmscq/article/details/7365066)这个网址里有说明。  

### 3，解决Google Analytics访问慢
如果octoperss开启了谷歌的访问数据统计服务，在网站会加载谷歌的ga.js。大家肯定知道谷歌在中国被墙。所以可以修改成放在国内提供的cdn服务器的ga.js。这里我使用的是[droidyue博主](http://droidyue.com/blog/2014/06/22/fix-octopress-slow-loading-speed-issue-in-china-mainland/)存放在七牛CDN上的js：`http://droidyue-tools.qiniudn.com/ga.js`已验证，完全可以正常收集数据。经过查找加载ga.js的代码`source/_includes/google_analytics.html`:  

{% include_code google_analytics.html %}  

## 三、更换主题
如果在网上找到一个比较好的主题，可以先找个这个主题的库地址，然后安装。例如我这个greyshade主题，使用如下脚本安装主题：  

{% codeblock 安装greyshade主题windos脚本 lang:bat  %}
git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
rake "install[greyshade]"
rake generate
{% endcodeblock %}

## 四、修改个人网站中文
greyshade主题都是英文的，例如标题啊，侧边栏。  

### 1,侧边栏中文  
{% img /images/pz/cbl.jpg P侧边栏 %}  

如图红圈里的"博客、关于我、存档"，之前都是英文，如果要修改成中文，文件路径在`/source/_includes/navigation.html`：  

{% codeblock navigation.htm lang:html  %}
<ul class="main">
    <li><a href="{{ root_url }}/">博客</a></li>
    <li><a href="{{ root_url }}/about/">关于我</a></li>
    <li><a href="{{ root_url }}/blog/archives">存档</a></li>
</ul>
{% endcodeblock %}  


### 2,"Comments"中文  

#### 2.1,查看评论：  
![查看评论](/images/pz/pl.jpg)   
 
如图红圈里的是“查看评论”，在安装主题完是英文的，如果要修改成中文，文件路径在`\source\_includes\article.html`:  

{% codeblock article.html lang:html  %}
<!--<span class="comments"><a href="{{ root_url }}{{ post.url }}#disqus_thread">Comments</a></span>-->
<span class="comments"><a href="{% raw  %}{% if index %}{{ root_url }}{{ post.url }}{% endif %}{% endraw %}#comments">查看评论</a></span>
{% endcodeblock %}  

* * *   

#### 2.2,评论:  

![评论](/images/pz/pl2.jpg)   

如图红圈里的是“评论”，在安装主题完是英文的，如果要修改成中文，文件路径在`\source\_layouts\post.html`   

{% codeblock post.html lang:html  %}
<!--<section>
    <h1>Comments</h1>
   ......
</section>-->
<section>
    <h1>评论</h1>
    ......
</section>
{% endcodeblock %}  
 
### 3,"read on"中文
如下图：  

![read on](/images/pz/ydqw.jpg)  

如上图，“阅读全文”在没汉化之前是“Continue reading”，文件路径在`/_config.yml`：   

{% codeblock 将Continue reading修改为中文 lang:YAML  %}
# excerpt_link: "Continue reading &rarr;"  #  "Continue reading" link text at the bottom of excerpted articles
excerpt_link: "阅读全文 &rarr;"  
{% endcodeblock %}    


## 五、博客不显示时间  
刚安装的主题居然不显示时间，如下图：
![时间显示](/images/pz/sjxs.jpg)  
红圈的地方刚开始时间是不显示的，后来发现是没有包含日期插件，但是去网上下日期插件也不行，后来自己想了办法，修改了octopress代码，直接在代码里格式化，代码路径在`\source\_includes\post\date.html`，将`date_format`，修改为`date| date: "%Y-%m-%d %H:%M:%S"`。  

## 六、安装国内多说插件  
本来想安装国外的disqus，但是，去disqus官网注册之后，放到博客，怎么也不显示，转而安装国内的多说评论插件。   
 
### 1,首先注册多说帐号  
首先去[多说官网](http://duoshuo.com/)注册帐号且创建站点。但是坑爹的多说，我怎么找都没有找到创造站点的地方，后来在一个非常隐秘的界面找到是在[这里](http://duoshuo.com/create-site/ "create-site")，多说也没有一个帮助文档吗，或许是我没找到吧。  
注册站点之后记住二级域名，如下图：  
![新建站点](/images/pz/zd.jpg)   

### 2,配置octopress  
配置`/_config.yml`文件，在文件最后加代码如下：  


{% codeblock _config.yml lang:YAML  %}
#  Duoshuo Comments
duoshuo_comments: true
duoshuo_short_name: twalksong
 {% endcodeblock %}    
twalksong为我的多说二级域名。  

### 3,加多说代码  
在路径`\source\_includes\post`，新增文件`duoshuo.html`，并将以下代码写到此文件：  


{% codeblock duoshuo.html lang:html  %}
<!-- 多说评论框 start -->
	<div class="ds-thread" data-title="{% raw  %}{% if site.titlecase %}{{ page.title | titlecase }}{% else %}
	{{ page.title }}{% endif %}{% endraw  %}"></div>
<!-- 多说评论框 end -->
<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
<script type="text/javascript">
var duoshuoQuery = {short_name:"{% raw  %}{{ site.duoshuo_short_name }}{% endraw  %}"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0]
		 || document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
	</script>
<!-- 多说公共JS代码 end -->
{% endcodeblock %}  

### 4,修改原来文章评论代码  
修改`\source\_layouts\post.html`文件，在最后加如下代码:  


{% codeblock post.html lang:html  %}
{% raw  %}{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true%}{% endraw  %}
  <section>
    <h1>评论</h1>
    <div id="comments" aria-live="polite">{% raw  %}{% include post/duoshuo.html %}{% endraw  %}</div>
  </section>
{% raw  %}{% endif %}{% endraw  %}

{% endcodeblock %}    

### 5,修改“查看评论代码”  
修改`\source\_includes\article.html`文件，在以前的disqus代码下加如下代码:  

{% codeblock lang:html article.html %}
{% raw  %}{% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}{% endraw  %}
          <span class="comments"><a href="{% raw  %}{% if index %}{{ root_url }}{{ post.url }}{% endif %}{% endraw  %}#comments">查看评论</a></span>
        {% raw  %} {% endif %}{% endraw  %}
{% endcodeblock %}  

### 6,至此完结，如果还有什么地方发现需要评论，按照上面的思路修改就ok。  

## 七、增加自动生成目录功能(TOC)  
摘抄[Octopress易筋经，目录表ToC](http://khaos.github.io/blog/2012/12/05/generating-toc-in-octopress/):
{% blockquote %}
维护长博客的时候，如果加上一个目录表 (Table of Contents)，会令读者对文章结构有一个清晰的把握。基于Octopress的博客系统，有两种常见的创建目录表的方式：基于 kramdown1 的实现，以及基于 jQuery 插件的实现。前者基本上不需要配置，仅要求把默认的 Markdown parser 改为 kramdown 即可。后者则需要对系统进行相对较多的修改。
{% endblockquote %}  
我这里使用第一种kramdown方法实现，所以这里着重介绍第一种方法，第二种方法没有试验。  

### 方式一：利用kramdown内嵌的ToC功能  

kramdown是一款由Ruby实现的Markdown解析器。它扩展的标准Markdown语言，添加了很多语法，其中一个就是内置了ToC的实现。这让在基于Jekyll/Octopress的博客系统中插入ToC变得简单而灵活，但是不幸的是，它的目录结构和层次需要在`_config.yml`中指定，也就是说，这些设定是全站的，你无法在某一篇Blog中使用不同于全站的ToC结构。  
实现这种方式的配置很简单，仅需要在你的`_config.yml`文件中，将默认的 Markdown parser 改为 kramdown，也即，`markdown: kramdown`，在kramdown中，默认的目录树层次是从h1到h6，你可以用下的设定将这个层次改为从h1到h3，  

{% codeblock lang:yaml 将octopress的解析器修改为kramdown %}
markdown: kramdown
kramdown:
  toc_levels: 1..3 #将默认的目录树层次修改为从h1到h3
{% endcodeblock %}  
  

如果没有还没有安装kramdown，需要安装kramdown解析器：  
1，修改/Gemfile，在文件最后增加一行：`gem 'kramdown', '~> 0.14'`。  
2，然后打开windows命令行工具，定位到octopress目录，执行如下命令`bundle install`，kramdown会自动安装。  


然后修改toc的样式，样式目录位于`\sass\custom\_styles.scss`，在文件最后一行增加如下代码：  

{% codeblock lang:css toc样式 %}
# markdown-toc:before {
  content: "目录";
  font-weight: bold;
}
ul#markdown-toc {
  list-style: none;
  background-color: white;
}
.blog-index #markdown-toc {
  display: none;
}
{% endcodeblock %} 


插入ToC也很简单，几乎在你的文章任何地方，加入下面的代码，在相应的部分kramdown就会帮你生成并插入一个ToC，  

{% codeblock lang:yaml 插入toc代码 %}
    * Put anything here
      
{% endcodeblock %} 

***注：关于阅读全文的问题：***  
这里有一个问题就是如果在文章中加了`<!-- more -->`，因此在博客首页只会显示文章的一部分，那么在`<!-- more -->`之下的目录就不会起作用，所以在博客首页的时候就不显示目录，点击文章进去再显示目录。  
网上有解决办法，但是试验不成功，后来经过本人测试，可以如下解决，在目录`\source\_includes\article.html`,修改如下代码：  

{% codeblock lang:html toc解决办法 %}
<div class="entry-content blog-index" itemprop="articleBody">
		{% raw  %}{{ content | excerpt }}
		{% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
		{% if excerpted == 'true' %}<a href="{{ root_url }}{{ post.url }}" class="more-link">{{ site.excerpt_link }}</a>{% endif %}{% endraw  %}
</div>
{% endcodeblock %} 

主要变化是增加了css类blog-index，这个类的作用就是隐藏目录。为什么会是在article.html文件呢，因为如果是博客首页，在这个页面会有一个判断`{% raw  %}{% if index %}{% endraw  %}`，index就是博客首页的变量，所以这样，就可以在博客首页的时候隐藏目录，然后点击文章才展示目录。以下是`article.html`全部代码。  

{% include_code article.html %}  

### 方式二：利用jQuery的ToC插件  
这种方式实现起来稍微复杂一些，好处是可以根据需要调整ToC的层次结构。当然，它也有局限性，例如，就我的实现而言，ToC的位置是固定浮动与整篇正文之上的，也就是说它会出现在文章的最开头处。这里应用的方法主要参照的是[Brian Clapper的博客](http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/)  
*   jQuery插件支持  
按照jQuery网站的提示配置你的系统，并且下载[Table of Contents jQuery Plugin](http://fuelyourcoding.com/scripts/toc/)，将相应的JS文件放到`source/javascripts`目录。在`source/_includes/custom/after_footer.html`中添加    

{% codeblock after_footer.html lang:html  %}
// !!! Load jQuery before this
<script type="text/javascript">
    jQuery.noConflict();
</script>
<script src="/javascripts/jquery.scrollTo.min.js" type="text/javascript"></script>
<script src="/javascripts/jquery.tableofcontents.min.js" type="text/javascript"></script>
{% endcodeblock %}  

*   创建JavaScript文件，例如，`tocgenerator.js`，使其包含下面的代码，   

{% codeblock tocgenerator.js lang:javascript  %}
function generateTOC(insertBefore, heading, startLv) {
    var container = jQuery("<div id='tocBlock'></div>");
    var div = jQuery("<ul id='toc'></ul>");
    var content = jQuery(insertBefore).first();

    if (heading !== undefined && heading !== null) {
        container.append('<span class="tocHeading">' + heading + '</span>');
    }

    if (startLv === undefined) { startLv = 1; }

    div.tableOfContents(content, { startLevel: startLv });
    container.append(div);
    container.insertBefore(insertBefore);
}
{% endcodeblock %}   

*   载入创建的JS文件（`source/_includes/custom/after_footer.html`）  

    <script src="/javascripts/tocgenerator.js" type="text/javascript"></script>  

*   创建ToC模块，依然在`source/_includes/custom/after_footer.html`中，添加，    


{% codeblock after_footer.html lang:javascript  %}
{% raw  %}{% if page.toc == true %}
  {% if page.tocstartlv %}{% endraw  %}
    <script type="text/javascript">
    jQuery(document).ready(function() {
      // Put a TOC right before the entry content.
      generateTOC('.entry-content', 'Contents', {{ page.tocstartlv }});
    });
    </script>
  {% raw  %}{% else %}{% endraw  %}
    <script type="text/javascript">
    jQuery(document).ready(function() {
      // Put a TOC right before the entry content.
      generateTOC('.entry-content', 'Contents');
    });
    </script>
  {% raw  %}{% endif %}
  {% endif %}{% endraw  %}
{% endcodeblock %}  

*   插入ToC  
与方式一不同，第二种方法插入ToC需要在文章的开始的Liquid标签出用两个新标签toc和tocstartlv来控制是否显示ToC以及ToC starting level。例如，本文采用了如下设定，   

{% codeblock lang:yaml 插入toc代码 %}
    toc: true
    tocstartlv: 2
{% endcodeblock %}

****注：第二种方法还没有经过测试，但是网上有测试成功的，所以我贴出来供大家参考。****

## 八、修改链接为打开窗口方式  
Octopress无法将外链在新窗口中打开，在网上找到一段代码，网址是[让Octopress在新标签页中打开外链](http://firestudio.cn/blog/2013/01/13/rang-octopresszai-xin-biao-qian-ye-zhong-da-kai-wai-lian/),代码如下：    


{% codeblock open-in-blank.js lang:javascript  %}
function addBlankTargetForLinks () {
  $('a[href^="http"]').each(function(){
		$(this).attr('target', '_blank');
	});
}
 
$(document).bind('DOMNodeInserted', function(event) {
	addBlankTargetForLinks();
});
{% endcodeblock %}  

用法很简单：

1.将上面的代码下载下来或者复制其内容；  
2.保存到octopress目录的source/javascripts/子目录中,另存为open-in-blank.js；  
3.修改source/_includes/custom/header.html，在下面插入如下代码即可：    

    <script type="text/javascript" src="{{ root_url }}/javascripts/open-in-blank.js"></script>  
	
## 九、加“关于我”界面  
刚安装的主题是没有关于我网页的，这个需要自己创建，代码如下：   

    rake new_page['about']  

会生成`source\about\index.markdown`文件，修改这个文件，然后生成、预览、部署就行。  

(完)
